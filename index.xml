<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Some Notes</title>
    <link>https://axcuan.github.io/</link>
    <description>Recent content on Some Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Jan 2020 20:13:27 +0800</lastBuildDate>
    
	<atom:link href="https://axcuan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clang数组2</title>
      <link>https://axcuan.github.io/posts/Clang%E6%95%B0%E7%BB%842/</link>
      <pubDate>Wed, 01 Jan 2020 20:13:27 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/Clang%E6%95%B0%E7%BB%842/</guid>
      <description>数组是静态的，不能插入或删除元素 在C语言中，数组一旦被定义后，占用的内存空间就是固定的，容量就是不可</description>
    </item>
    
    <item>
      <title>Clang字符串处理函数</title>
      <link>https://axcuan.github.io/posts/Clang%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 19:39:32 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/Clang%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>C语言提供了丰富的字符串处理函数，可以对字符串进行输入、输出、合并、修改、比较、转换、复制、搜索等操</description>
    </item>
    
    <item>
      <title>Clang数组1</title>
      <link>https://axcuan.github.io/posts/Clang%E6%95%B0%E7%BB%841/</link>
      <pubDate>Wed, 01 Jan 2020 18:25:36 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/Clang%E6%95%B0%E7%BB%841/</guid>
      <description>数组 二维数组 二维数组的初始化可以按行分段赋值，也可按行连续赋值。 例如，对于数组 a[5][3]，按行分</description>
    </item>
    
    <item>
      <title>C语言非阻塞式键盘监听(用户不输入数据程序也能继续执行)</title>
      <link>https://axcuan.github.io/posts/C%E8%AF%AD%E8%A8%80%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F%E9%94%AE%E7%9B%98%E7%9B%91%E5%90%AC%E7%94%A8%E6%88%B7%E4%B8%8D%E8%BE%93%E5%85%A5%E6%95%B0%E6%8D%AE%E7%A8%8B%E5%BA%8F%E4%B9%9F%E8%83%BD%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Wed, 01 Jan 2020 16:38:03 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/C%E8%AF%AD%E8%A8%80%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F%E9%94%AE%E7%9B%98%E7%9B%91%E5%90%AC%E7%94%A8%E6%88%B7%E4%B8%8D%E8%BE%93%E5%85%A5%E6%95%B0%E6%8D%AE%E7%A8%8B%E5%BA%8F%E4%B9%9F%E8%83%BD%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C/</guid>
      <description>所谓键盘监听，就是用户按下某个键时系统做出相应的处理，本章讲到的输入输出函数也是键盘监听函数的一种，</description>
    </item>
    
    <item>
      <title>Clang模拟密码输入(显示星号)</title>
      <link>https://axcuan.github.io/posts/Clang%E6%A8%A1%E6%8B%9F%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E6%98%BE%E7%A4%BA%E6%98%9F%E5%8F%B7/</link>
      <pubDate>Wed, 01 Jan 2020 16:17:38 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/Clang%E6%A8%A1%E6%8B%9F%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E6%98%BE%E7%A4%BA%E6%98%9F%E5%8F%B7/</guid>
      <description>一个安全的程序在用户输入密码时不应该显示密码本身，而应该回显星号或者点号，例如······或****</description>
    </item>
    
    <item>
      <title>ClangScanf的高级用法</title>
      <link>https://axcuan.github.io/posts/ClangScanf%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</link>
      <pubDate>Wed, 01 Jan 2020 15:48:53 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/ClangScanf%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</guid>
      <description>Scanf() 的高级用法 指定读取长度 还记得在 printf() 中可以指定最小输出宽度吗？就是在格式控制符的中间加上一个数字，例如</description>
    </item>
    
    <item>
      <title>结合Clang缓冲区谈scanf函数</title>
      <link>https://axcuan.github.io/posts/%E7%BB%93%E5%90%88Clang%E7%BC%93%E5%86%B2%E5%8C%BA%E8%B0%88scanf%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 15:20:07 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/%E7%BB%93%E5%90%88Clang%E7%BC%93%E5%86%B2%E5%8C%BA%E8%B0%88scanf%E5%87%BD%E6%95%B0/</guid>
      <description>scanf() 是从标准输入设备（键盘）读取数据，带有行缓冲区的，这让 scanf() 具有了一些独特的“性格”，例如可以连续输入</description>
    </item>
    
    <item>
      <title>Clang清空(刷新)缓冲区</title>
      <link>https://axcuan.github.io/posts/Clang%E6%B8%85%E7%A9%BA%E5%88%B7%E6%96%B0%E7%BC%93%E5%86%B2%E5%8C%BA/</link>
      <pubDate>Wed, 01 Jan 2020 13:17:02 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/Clang%E6%B8%85%E7%A9%BA%E5%88%B7%E6%96%B0%E7%BC%93%E5%86%B2%E5%8C%BA/</guid>
      <description>缓冲区的优点很明显，它加快了程序的运行速度，减少了硬件的读写次数，让整个计算机变得流畅起来；但是，缓</description>
    </item>
    
    <item>
      <title>Clang缓冲区</title>
      <link>https://axcuan.github.io/posts/Clang%E7%BC%93%E5%86%B2%E5%8C%BA/</link>
      <pubDate>Wed, 01 Jan 2020 12:59:13 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/Clang%E7%BC%93%E5%86%B2%E5%8C%BA/</guid>
      <description>缓冲区 缓冲区（Buffer）又称为缓存（Cache），是内存空间的一部分。也就是说，计算机在内存中预</description>
    </item>
    
    <item>
      <title>Clang读取从键盘输入的数据</title>
      <link>https://axcuan.github.io/posts/Clang%E8%AF%BB%E5%8F%96%E4%BB%8E%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Tue, 31 Dec 2019 23:13:08 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/Clang%E8%AF%BB%E5%8F%96%E4%BB%8E%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
      <description>在C语言中，有多个函数可以从键盘获得用户输入： scanf()：和 printf() 类似，scanf() 可以输入多种类</description>
    </item>
    
    <item>
      <title>Clang字符串</title>
      <link>https://axcuan.github.io/posts/Clang%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 31 Dec 2019 00:02:47 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/Clang%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>gcc 好像不能成功编译utf-8编码格式的c语言文件。 只要把c语言文件编码方式更改为ANSI即可。 ps:</description>
    </item>
    
    <item>
      <title>Clang输出汇总</title>
      <link>https://axcuan.github.io/posts/Clang%E8%BE%93%E5%87%BA%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sun, 29 Dec 2019 19:29:04 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/Clang%E8%BE%93%E5%87%BA%E6%B1%87%E6%80%BB/</guid>
      <description>输出汇总 printf格式控制符： 格式控制符 说明 %c 输出一个单一的字符 %hd、%d、%ld 以十进制、有符</description>
    </item>
    
    <item>
      <title>C语言符号与进制</title>
      <link>https://axcuan.github.io/posts/C%E8%AF%AD%E8%A8%80%E7%AC%A6%E5%8F%B7%E4%B8%8E%E8%BF%9B%E5%88%B6/</link>
      <pubDate>Thu, 26 Dec 2019 23:47:21 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/C%E8%AF%AD%E8%A8%80%E7%AC%A6%E5%8F%B7%E4%B8%8E%E8%BF%9B%E5%88%B6/</guid>
      <description>内存 内存中存取数据要明确3件事： 数据存储在哪里 数据的长度 数据的处理方式 在32位环境中，各种数据类型的</description>
    </item>
    
    <item>
      <title>C语言学习</title>
      <link>https://axcuan.github.io/posts/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 15 Dec 2019 13:23:09 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</guid>
      <description>示例 #include &amp;lt;stdio.h&amp;gt; //包含标准输入输出头文件 //standared input output header 标准输入输出头文件 void main() { char ch = &#39;a&#39;; printf(&amp;quot;</description>
    </item>
    
    <item>
      <title>C语言学习笔记 常用函数</title>
      <link>https://axcuan.github.io/posts/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 15 Dec 2019 13:22:53 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <description>Scanf函数 C函数库包含了多个输入函数，scanf是最通用的一个，可以读取不同格式的数据 基本用法 V</description>
    </item>
    
    <item>
      <title>GCC和GDB</title>
      <link>https://axcuan.github.io/posts/GCC%E5%92%8CGDB/</link>
      <pubDate>Sun, 15 Dec 2019 13:22:14 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/GCC%E5%92%8CGDB/</guid>
      <description>GCC GCC提供了大量的编译选项，大约有100个，其中最基本，最常用的参数如下： |选项|说明| -|-|- -o | 使用</description>
    </item>
    
    <item>
      <title>环境安装</title>
      <link>https://axcuan.github.io/posts/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 15 Dec 2019 13:21:50 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</guid>
      <description>安装pwntools 安装依赖 git clone https://github.com/aquynh/capstone cd capstone make make install 安装pwntools(需要联网，简易使用国内源) sudo apt-get install python-dev</description>
    </item>
    
    <item>
      <title>IOT安全资料整合</title>
      <link>https://axcuan.github.io/posts/IOT%E5%AE%89%E5%85%A8%E8%B5%84%E6%96%99%E6%95%B4%E5%90%88/</link>
      <pubDate>Sun, 15 Dec 2019 13:21:18 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/IOT%E5%AE%89%E5%85%A8%E8%B5%84%E6%96%99%E6%95%B4%E5%90%88/</guid>
      <description>OT安全资料整合 十一月 07, 2019 build [](#IOT-安全资料整合（主要是路由器） &amp;ldquo;IOT 安全资料整合（主要是路由器</description>
    </item>
    
    <item>
      <title>MIPS32架构堆栈</title>
      <link>https://axcuan.github.io/posts/MIPS32%E6%9E%B6%E6%9E%84%E5%A0%86%E6%A0%88/</link>
      <pubDate>Sun, 15 Dec 2019 13:20:51 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/MIPS32%E6%9E%B6%E6%9E%84%E5%A0%86%E6%A0%88/</guid>
      <description>MIPS堆栈原理 在计算机科学中，栈是一种具有 先进后出(FILO) 队列特性的数据结构。调用栈(Call</description>
    </item>
    
    <item>
      <title>MIPS指令集</title>
      <link>https://axcuan.github.io/posts/MIPS%E6%8C%87%E4%BB%A4%E9%9B%86/</link>
      <pubDate>Sun, 15 Dec 2019 13:20:02 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/MIPS%E6%8C%87%E4%BB%A4%E9%9B%86/</guid>
      <description>MIPS汇编语言基础 MIPS指令特点 MIPS 固定4字节指令长度 内存中的数据访问 (load/store) 必须严格对齐（至少4字节对</description>
    </item>
    
    <item>
      <title>MIPS汇编语言基础</title>
      <link>https://axcuan.github.io/posts/MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 14 Dec 2019 22:23:23 +0800</pubDate>
      
      <guid>https://axcuan.github.io/posts/MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</guid>
      <description>寄存器 ​ RISC的一个显著特点就是大量使用寄存器。因为寄存器的存取可以在一个时钟周期内完成，同时简化</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://axcuan.github.io/links/</link>
      <pubDate>Sat, 20 Apr 2019 23:10:44 +0800</pubDate>
      
      <guid>https://axcuan.github.io/links/</guid>
      <description>本页面为 友情链接 承载页面。</description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://axcuan.github.io/archives/</link>
      <pubDate>Sat, 20 Apr 2019 13:29:27 +0800</pubDate>
      
      <guid>https://axcuan.github.io/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>